var http_1 = require("services/http");
var config_1 = require("../config");
var AuthenticationService = (function () {
    function AuthenticationService() {
        console.log("AuthenticationService constructed with loggedIn [" + this.isLoggedIn() + "] based on localStorage");
    }
    AuthenticationService.prototype.isLoggedIn = function () {
        var token = localStorage.getItem('jwt');
        if (token && !this.isExpired(token)) {
            return true;
        }
        return false;
    };
    AuthenticationService.prototype.logIn = function (token) {
        console.log("AuthenticationService logIn (set jwt in localStorage)");
        localStorage.setItem("jwt", token);
    };
    AuthenticationService.prototype.logOut = function () {
        console.log("AuthenticationService logOut (remove jwt from localStorage)");
        localStorage.removeItem('jwt');
    };
    AuthenticationService.prototype.isExpired = function (token) {
        return (Date.now() > this.getExpireTimestamp(token));
    };
    AuthenticationService.prototype.getExpireTimestamp = function (token) {
        var tokenArr = token.split(".");
        var decodedMeta = this.base64Decode(tokenArr[1]);
        var jsonMeta = JSON.parse(decodedMeta);
        return jsonMeta.exp * 1000;
    };
    AuthenticationService.prototype.getUsername = function (token) {
        var tokenArr = token.split(".");
        var decodedMeta = this.base64Decode(tokenArr[1]);
        var jsonMeta = JSON.parse(decodedMeta);
        return jsonMeta.username;
    };
    AuthenticationService.prototype.getNewToken = function (username, password) {
        return http_1.$http.post(config_1.REST_HOST + "/api/token", { "username": username, "password": password }, null);
    };
    AuthenticationService.prototype.base64Decode = function (s) {
        var e = {}, i, b = 0, c, x, l = 0, a, r = '', w = String.fromCharCode, L = s.length;
        var A = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        for (i = 0; i < 64; i++) {
            e[A.charAt(i)] = i;
        }
        for (x = 0; x < L; x++) {
            c = e[s.charAt(x)];
            b = (b << 6) + c;
            l += 6;
            while (l >= 8) {
                ((a = (b >>> (l -= 8)) & 0xff) || (x < (L - 2))) && (r += w(a));
            }
        }
        return r;
    };
    return AuthenticationService;
})();
exports.AuthenticationService = AuthenticationService;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL0F1dGhlbnRpY2F0aW9uU2VydmljZS50cyJdLCJuYW1lcyI6WyJBdXRoZW50aWNhdGlvblNlcnZpY2UiLCJBdXRoZW50aWNhdGlvblNlcnZpY2UuY29uc3RydWN0b3IiLCJBdXRoZW50aWNhdGlvblNlcnZpY2UuaXNMb2dnZWRJbiIsIkF1dGhlbnRpY2F0aW9uU2VydmljZS5sb2dJbiIsIkF1dGhlbnRpY2F0aW9uU2VydmljZS5sb2dPdXQiLCJBdXRoZW50aWNhdGlvblNlcnZpY2UuaXNFeHBpcmVkIiwiQXV0aGVudGljYXRpb25TZXJ2aWNlLmdldEV4cGlyZVRpbWVzdGFtcCIsIkF1dGhlbnRpY2F0aW9uU2VydmljZS5nZXRVc2VybmFtZSIsIkF1dGhlbnRpY2F0aW9uU2VydmljZS5nZXROZXdUb2tlbiIsIkF1dGhlbnRpY2F0aW9uU2VydmljZS5iYXNlNjREZWNvZGUiXSwibWFwcGluZ3MiOiJBQUFBLHFCQUFvQixlQUFlLENBQUMsQ0FBQTtBQUNwQyx1QkFBd0IsV0FBVyxDQUFDLENBQUE7QUFFcEM7SUFFSUE7UUFDSUMsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsbURBQW1EQSxHQUFHQSxJQUFJQSxDQUFDQSxVQUFVQSxFQUFFQSxHQUFHQSx5QkFBeUJBLENBQUNBLENBQUNBO0lBQ3JIQSxDQUFDQTtJQUVERCwwQ0FBVUEsR0FBVkE7UUFDSUUsSUFBSUEsS0FBS0EsR0FBR0EsWUFBWUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFDeENBLEVBQUVBLENBQUFBLENBQUNBLEtBQUtBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ2pDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUNoQkEsQ0FBQ0E7UUFDREEsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7SUFDakJBLENBQUNBO0lBRURGLHFDQUFLQSxHQUFMQSxVQUFNQSxLQUFVQTtR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LEVBQUVBLEVBQUNBLENBQUNBO1lBQ2JBLENBQUNBLEdBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQUFBLENBQUNBLEdBQUNBLENBQUNBLENBQUNBLElBQUVBLENBQUNBLENBQUNBLEdBQUNBLENBQUNBLENBQUNBO1lBQUFBLENBQUNBLElBQUVBLENBQUNBLENBQUNBO1lBQ2pDQSxPQUFNQSxDQUFDQSxJQUFFQSxDQUFDQSxFQUFDQSxDQUFDQTtnQkFBQUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0EsS0FBR0EsQ0FBQ0EsQ0FBQ0EsSUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBRUEsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFBQUEsQ0FBQ0E7UUFDL0RBLENBQUNBO1FBQ0RBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBO0lBQ2JBLENBQUNBO0lBQ0xULDRCQUFDQTtBQUFEQSxDQTdEQSxBQTZEQ0EsSUFBQTtBQTdEWSw2QkFBcUIsd0JBNkRqQyxDQUFBIiwiZmlsZSI6InNlcnZpY2VzL0F1dGhlbnRpY2F0aW9uU2VydmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7JGh0dHB9IGZyb20gXCJzZXJ2aWNlcy9odHRwXCI7XG5pbXBvcnQge1JFU1RfSE9TVH0gZnJvbSBcIi4uL2NvbmZpZ1wiO1xuXG5leHBvcnQgY2xhc3MgQXV0aGVudGljYXRpb25TZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkF1dGhlbnRpY2F0aW9uU2VydmljZSBjb25zdHJ1Y3RlZCB3aXRoIGxvZ2dlZEluIFtcIiArIHRoaXMuaXNMb2dnZWRJbigpICsgXCJdIGJhc2VkIG9uIGxvY2FsU3RvcmFnZVwiKTtcbiAgICB9XG5cbiAgICBpc0xvZ2dlZEluKCk6IGJvb2xlYW4ge1xuICAgICAgICBsZXQgdG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnand0Jyk7XG4gICAgICAgIGlmKHRva2VuICYmICF0aGlzLmlzRXhwaXJlZCh0b2tlbikpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBsb2dJbih0b2tlbjogYW55KTogdm9pZHtcbiAgICAgICAgY29uc29sZS5sb2coXCJBdXRoZW50aWNhdGlvblNlcnZpY2UgbG9nSW4gKHNldCBqd3QgaW4gbG9jYWxTdG9yYWdlKVwiKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJqd3RcIiwgdG9rZW4pO1xuICAgIH1cblxuICAgIGxvZ091dCgpOiB2b2lkIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJBdXRoZW50aWNhdGlvblNlcnZpY2UgbG9nT3V0IChyZW1vdmUgand0IGZyb20gbG9jYWxTdG9yYWdlKVwiKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ2p3dCcpO1xuICAgIH1cblxuICAgIGlzRXhwaXJlZCh0b2tlbjogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIC8vY29uc29sZS5sb2coXCJjb21wYXJlIHRpbWVzdGFtcHM6IFwiICsgRGF0ZS5ub3coKSArIFwiIGFuZCBcIiArIHRoaXMuZ2V0RXhwaXJlVGltZXN0YW1wKHRva2VuKSk7XG4gICAgICAgIHJldHVybiAoRGF0ZS5ub3coKSA+IHRoaXMuZ2V0RXhwaXJlVGltZXN0YW1wKHRva2VuKSk7XG4gICAgfVxuXG4gICAgZ2V0RXhwaXJlVGltZXN0YW1wKHRva2VuOiBzdHJpbmcpOiBudW1iZXIge1xuICAgICAgICBsZXQgdG9rZW5BcnIgPSB0b2tlbi5zcGxpdChcIi5cIik7XG4gICAgICAgIGxldCBkZWNvZGVkTWV0YSA9IHRoaXMuYmFzZTY0RGVjb2RlKHRva2VuQXJyWzFdKTtcbiAgICAgICAgbGV0IGpzb25NZXRhID0gSlNPTi5wYXJzZShkZWNvZGVkTWV0YSk7XG4gICAgICAgIHJldHVybiBqc29uTWV0YS5leHAgKiAxMDAwO1xuICAgIH1cblxuICAgIGdldFVzZXJuYW1lKHRva2VuOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBsZXQgdG9rZW5BcnIgPSB0b2tlbi5zcGxpdChcIi5cIik7XG4gICAgICAgIGxldCBkZWNvZGVkTWV0YSA9IHRoaXMuYmFzZTY0RGVjb2RlKHRva2VuQXJyWzFdKTtcbiAgICAgICAgbGV0IGpzb25NZXRhID0gSlNPTi5wYXJzZShkZWNvZGVkTWV0YSk7XG4gICAgICAgIHJldHVybiBqc29uTWV0YS51c2VybmFtZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIENhbGwgUkVTVCBhcGkgdG8gcmVxdWVzdCBhIEpXVCB0b2tlblxuICAgICogQHJldHVybiBQcm9taXNlIG9iamVjdFxuICAgICovXG4gICAgZ2V0TmV3VG9rZW4odXNlcm5hbWU6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiAkaHR0cC5wb3N0KFJFU1RfSE9TVCArIFwiL2FwaS90b2tlblwiLCB7XCJ1c2VybmFtZVwiOiB1c2VybmFtZSwgXCJwYXNzd29yZFwiIDogcGFzc3dvcmR9LCBudWxsKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGJhc2U2NERlY29kZShzOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICB2YXIgZT17fSxpLGI9MCxjLHgsbD0wLGEscj0nJyx3PVN0cmluZy5mcm9tQ2hhckNvZGUsTD1zLmxlbmd0aDtcbiAgICAgICAgdmFyIEE9XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCI7XG4gICAgICAgIGZvcihpPTA7aTw2NDtpKyspe2VbQS5jaGFyQXQoaSldPWk7fVxuICAgICAgICBmb3IoeD0wO3g8TDt4Kyspe1xuICAgICAgICAgICAgYz1lW3MuY2hhckF0KHgpXTtiPShiPDw2KStjO2wrPTY7XG4gICAgICAgICAgICB3aGlsZShsPj04KXsoKGE9KGI+Pj4obC09OCkpJjB4ZmYpfHwoeDwoTC0yKSkpJiYocis9dyhhKSk7fVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByO1xuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==