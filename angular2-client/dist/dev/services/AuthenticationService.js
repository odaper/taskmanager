var http_1 = require("services/http");
var config_1 = require("../config");
var AuthenticationService = (function () {
    function AuthenticationService() {
        console.log("AuthenticationService constructed with loggedIn [" + this.isLoggedIn() + "] based on localStorage");
    }
    AuthenticationService.prototype.isLoggedIn = function () {
        var token = localStorage.getItem('jwt');
        return (token && !this.isExpired(token));
    };
    AuthenticationService.prototype.logIn = function (token) {
        console.log("AuthenticationService logIn (set jwt in localStorage)");
        localStorage.setItem("jwt", token);
    };
    AuthenticationService.prototype.logOut = function () {
        console.log("AuthenticationService logOut (remove jwt from localStorage)");
        localStorage.removeItem('jwt');
    };
    AuthenticationService.prototype.isExpired = function (token) {
        return (Date.now() > this.getExpireTimestamp(token));
    };
    AuthenticationService.prototype.getExpireTimestamp = function (token) {
        var tokenArr = token.split(".");
        var decodedMeta = this.base64Decode(tokenArr[1]);
        var jsonMeta = JSON.parse(decodedMeta);
        return jsonMeta.exp * 1000;
    };
    AuthenticationService.prototype.getUsername = function (token) {
        var tokenArr = token.split(".");
        var decodedMeta = this.base64Decode(tokenArr[1]);
        var jsonMeta = JSON.parse(decodedMeta);
        return jsonMeta.username;
    };
    AuthenticationService.prototype.getNewToken = function (username, password) {
        return http_1.$http.post(config_1.REST_HOST + "/api/token", { "username": username, "password": password }, null);
    };
    AuthenticationService.prototype.base64Decode = function (s) {
        var e = {}, i, b = 0, c, x, l = 0, a, r = '', w = String.fromCharCode, L = s.length;
        var A = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        for (i = 0; i < 64; i++) {
            e[A.charAt(i)] = i;
        }
        for (x = 0; x < L; x++) {
            c = e[s.charAt(x)];
            b = (b << 6) + c;
            l += 6;
            while (l >= 8) {
                ((a = (b >>> (l -= 8)) & 0xff) || (x < (L - 2))) && (r += w(a));
            }
        }
        return r;
    };
    return AuthenticationService;
})();
exports.AuthenticationService = AuthenticationService;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL0F1dGhlbnRpY2F0aW9uU2VydmljZS50cyJdLCJuYW1lcyI6WyJBdXRoZW50aWNhdGlvblNlcnZpY2UiLCJBdXRoZW50aWNhdGlvblNlcnZpY2UuY29uc3RydWN0b3IiLCJBdXRoZW50aWNhdGlvblNlcnZpY2UuaXNMb2dnZWRJbiIsIkF1dGhlbnRpY2F0aW9uU2VydmljZS5sb2dJbiIsIkF1dGhlbnRpY2F0aW9uU2VydmljZS5sb2dPdXQiLCJBdXRoZW50aWNhdGlvblNlcnZpY2UuaXNFeHBpcmVkIiwiQXV0aGVudGljYXRpb25TZXJ2aWNlLmdldEV4cGlyZVRpbWVzdGFtcCIsIkF1dGhlbnRpY2F0aW9uU2VydmljZS5nZXRVc2VybmFtZSIsIkF1dGhlbnRpY2F0aW9uU2VydmljZS5nZXROZXdUb2tlbiIsIkF1dGhlbnRpY2F0aW9uU2VydmljZS5iYXNlNjREZWNvZGUiXSwibWFwcGluZ3MiOiJBQUFBLHFCQUFvQixlQUFlLENBQUMsQ0FBQTtBQUNwQyx1QkFBd0IsV0FBVyxDQUFDLENBQUE7QUFFcEM7SUFFSUE7UUFDSUMsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsbURBQW1EQSxHQUFHQSxJQUFJQSxDQUFDQSxVQUFVQSxFQUFFQSxHQUFHQSx5QkFBeUJBLENBQUNBLENBQUNBO0lBQ3JIQSxDQUFDQTtJQUVERCwwQ0FBVUEsR0FBVkE7UUFDSUUsSUFBSUEsS0FBS0EsR0FBR0EsWUFBWUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFDeENBLE1BQU1BLENBQUNBLENBQUNBLEtBQUtBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBO0lBQzdDQSxDQUFDQTtJQUVERixxQ0FBS0EsR0FBTEEsVUFBTUEsS0FBVUE7UUFDWkcsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsdURBQXVEQSxDQUFDQSxDQUFDQTtRQUNyRUEsWUFBWUEsQ0FBQ0EsT0FBT0EsQ0FBQ0Es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QUFDQSxDQUFDQSxDQUFDQTtZQUFBQSxDQUFDQSxHQUFDQSxDQUFDQSxDQUFDQSxJQUFFQSxDQUFDQSxDQUFDQSxHQUFDQSxDQUFDQSxDQUFDQTtZQUFBQSxDQUFDQSxJQUFFQSxDQUFDQSxDQUFDQTtZQUNqQ0EsT0FBTUEsQ0FBQ0EsSUFBRUEsQ0FBQ0EsRUFBQ0EsQ0FBQ0E7Z0JBQUFBLENBQUNBLENBQUNBLENBQUNBLEdBQUNBLENBQUNBLENBQUNBLEtBQUdBLENBQUNBLENBQUNBLElBQUVBLENBQUNBLENBQUNBLENBQUNBLEdBQUNBLElBQUlBLENBQUNBLElBQUVBLENBQUNBLENBQUNBLEdBQUNBLENBQUNBLENBQUNBLEdBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLElBQUVBLENBQUNBLENBQUNBLElBQUVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQUFBLENBQUNBO1FBQy9EQSxDQUFDQTtRQUNEQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUNiQSxDQUFDQTtJQUNMVCw0QkFBQ0E7QUFBREEsQ0ExREEsQUEwRENBLElBQUE7QUExRFksNkJBQXFCLHdCQTBEakMsQ0FBQSIsImZpbGUiOiJzZXJ2aWNlcy9BdXRoZW50aWNhdGlvblNlcnZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyRodHRwfSBmcm9tIFwic2VydmljZXMvaHR0cFwiO1xuaW1wb3J0IHtSRVNUX0hPU1R9IGZyb20gXCIuLi9jb25maWdcIjtcblxuZXhwb3J0IGNsYXNzIEF1dGhlbnRpY2F0aW9uU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJBdXRoZW50aWNhdGlvblNlcnZpY2UgY29uc3RydWN0ZWQgd2l0aCBsb2dnZWRJbiBbXCIgKyB0aGlzLmlzTG9nZ2VkSW4oKSArIFwiXSBiYXNlZCBvbiBsb2NhbFN0b3JhZ2VcIik7XG4gICAgfVxuXG4gICAgaXNMb2dnZWRJbigpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IHRva2VuID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2p3dCcpO1xuICAgICAgICByZXR1cm4gKHRva2VuICYmICF0aGlzLmlzRXhwaXJlZCh0b2tlbikpO1xuICAgIH1cblxuICAgIGxvZ0luKHRva2VuOiBhbnkpOiB2b2lke1xuICAgICAgICBjb25zb2xlLmxvZyhcIkF1dGhlbnRpY2F0aW9uU2VydmljZSBsb2dJbiAoc2V0IGp3dCBpbiBsb2NhbFN0b3JhZ2UpXCIpO1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImp3dFwiLCB0b2tlbik7XG4gICAgfVxuXG4gICAgbG9nT3V0KCk6IHZvaWQge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkF1dGhlbnRpY2F0aW9uU2VydmljZSBsb2dPdXQgKHJlbW92ZSBqd3QgZnJvbSBsb2NhbFN0b3JhZ2UpXCIpO1xuICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnand0Jyk7XG4gICAgfVxuXG4gICAgaXNFeHBpcmVkKHRva2VuOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcImNvbXBhcmUgdGltZXN0YW1wczogXCIgKyBEYXRlLm5vdygpICsgXCIgYW5kIFwiICsgdGhpcy5nZXRFeHBpcmVUaW1lc3RhbXAodG9rZW4pKTtcbiAgICAgICAgcmV0dXJuIChEYXRlLm5vdygpID4gdGhpcy5nZXRFeHBpcmVUaW1lc3RhbXAodG9rZW4pKTtcbiAgICB9XG5cbiAgICBnZXRFeHBpcmVUaW1lc3RhbXAodG9rZW46IHN0cmluZyk6IG51bWJlciB7XG4gICAgICAgIGxldCB0b2tlbkFyciA9IHRva2VuLnNwbGl0KFwiLlwiKTtcbiAgICAgICAgbGV0IGRlY29kZWRNZXRhID0gdGhpcy5iYXNlNjREZWNvZGUodG9rZW5BcnJbMV0pO1xuICAgICAgICBsZXQganNvbk1ldGEgPSBKU09OLnBhcnNlKGRlY29kZWRNZXRhKTtcbiAgICAgICAgcmV0dXJuIGpzb25NZXRhLmV4cCAqIDEwMDA7XG4gICAgfVxuXG4gICAgZ2V0VXNlcm5hbWUodG9rZW46IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIGxldCB0b2tlbkFyciA9IHRva2VuLnNwbGl0KFwiLlwiKTtcbiAgICAgICAgbGV0IGRlY29kZWRNZXRhID0gdGhpcy5iYXNlNjREZWNvZGUodG9rZW5BcnJbMV0pO1xuICAgICAgICBsZXQganNvbk1ldGEgPSBKU09OLnBhcnNlKGRlY29kZWRNZXRhKTtcbiAgICAgICAgcmV0dXJuIGpzb25NZXRhLnVzZXJuYW1lO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQ2FsbCBSRVNUIGFwaSB0byByZXF1ZXN0IGEgSldUIHRva2VuXG4gICAgKiBAcmV0dXJuIFByb21pc2Ugb2JqZWN0XG4gICAgKi9cbiAgICBnZXROZXdUb2tlbih1c2VybmFtZTogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoUkVTVF9IT1NUICsgXCIvYXBpL3Rva2VuXCIsIHtcInVzZXJuYW1lXCI6IHVzZXJuYW1lLCBcInBhc3N3b3JkXCIgOiBwYXNzd29yZH0sIG51bGwpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYmFzZTY0RGVjb2RlKHM6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHZhciBlPXt9LGksYj0wLGMseCxsPTAsYSxyPScnLHc9U3RyaW5nLmZyb21DaGFyQ29kZSxMPXMubGVuZ3RoO1xuICAgICAgICB2YXIgQT1cIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIjtcbiAgICAgICAgZm9yKGk9MDtpPDY0O2krKyl7ZVtBLmNoYXJBdChpKV09aTt9XG4gICAgICAgIGZvcih4PTA7eDxMO3grKyl7XG4gICAgICAgICAgICBjPWVbcy5jaGFyQXQoeCldO2I9KGI8PDYpK2M7bCs9NjtcbiAgICAgICAgICAgIHdoaWxlKGw+PTgpeygoYT0oYj4+PihsLT04KSkmMHhmZil8fCh4PChMLTIpKSkmJihyKz13KGEpKTt9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9