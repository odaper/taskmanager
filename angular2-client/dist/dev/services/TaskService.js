var http_1 = require("services/http");
var config_1 = require("../config");
var task_1 = require('../components/tasks/task');
var AuthenticationService_1 = require('services/AuthenticationService');
var TaskServiceImpl = (function () {
    function TaskServiceImpl() {
    }
    TaskServiceImpl.prototype.getTasks = function () {
        return http_1.$http.get(config_1.REST_HOST + "/api/tasks/" + this.getUserData().username + "/", this.getUserData().token);
    };
    TaskServiceImpl.prototype.addTask = function (task) {
        task.setUsername(this.getUserData().username);
        return http_1.$http.post(config_1.REST_HOST + "/api/tasks/" + this.getUserData().username + "/", task + "/", this.getUserData().token);
    };
    TaskServiceImpl.prototype.updateTask = function (task) {
        task.setUsername(this.getUserData().username);
        return http_1.$http.put(config_1.REST_HOST + "/api/tasks/" + this.getUserData().username + "/" + task._id + "/", task, this.getUserData().token);
    };
    TaskServiceImpl.prototype.deleteTask = function (task) {
        return http_1.$http.delete(config_1.REST_HOST + "/api/tasks/" + this.getUserData().username + "/" + task._id + "/", task, this.getUserData().token);
    };
    TaskServiceImpl.prototype.getUserData = function () {
        var token = localStorage.getItem("jwt");
        return { username: new AuthenticationService_1.AuthenticationService().getUsername(token), token: token };
    };
    return TaskServiceImpl;
})();
exports.TaskServiceImpl = TaskServiceImpl;
var TaskServiceOfflineImpl = (function () {
    function TaskServiceOfflineImpl() {
        this.goRun = new task_1.Task("Go for a run", 1);
        this.goShower = new task_1.Task("Go have a shower", 2);
        this.tasks = new Array();
        this.tasks.push(this.goRun);
        this.tasks.push(this.goShower);
    }
    TaskServiceOfflineImpl.prototype.getTasks = function () {
        var that = this;
        return new Promise(function (resolve, reject) {
            resolve({ actionResult: that.tasks });
        });
    };
    TaskServiceOfflineImpl.prototype.addTask = function (task) {
        var nextId = this.tasks.length++;
        task.setId(nextId);
        return new Promise(function (resolve, reject) {
            resolve({ actionResult: { _id: nextId } });
        });
    };
    TaskServiceOfflineImpl.prototype.updateTask = function (task) {
        return new Promise(function (resolve, reject) {
            resolve({ actionResult: { _id: task._id } });
        });
    };
    TaskServiceOfflineImpl.prototype.deleteTask = function (task) {
        return new Promise(function (resolve, reject) {
            resolve({ actionResult: { _id: task._id } });
        });
    };
    return TaskServiceOfflineImpl;
})();
exports.TaskServiceOfflineImpl = TaskServiceOfflineImpl;

//# sourceMappingURL=data:application/json;base64,