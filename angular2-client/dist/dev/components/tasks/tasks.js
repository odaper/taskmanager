var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var angular2_1 = require('angular2/angular2');
var AuthenticationService_1 = require('../../services/AuthenticationService');
var task_1 = require('components/tasks/task');
var TaskService_1 = require('../../services/TaskService');
var EventManager_1 = require("utils/eventbus/EventManager");
var forms_1 = require('angular2/forms');
var Tasks = (function () {
    function Tasks(authenticationService, taskService) {
        var _this = this;
        this.authenticationService = authenticationService;
        this.taskService = taskService;
        this.task = new task_1.Task();
        this.eventManager = EventManager_1.EventManager.getInstance();
        console.log("tasks.ts constructor");
        if (this.authenticationService.isLoggedIn()) {
            this.taskService.getTasks().then(function (obj) {
                _this.tasks = obj.actionResult;
                console.log("finished getting tasks: " + _this.tasks.length);
                _this.nrOfTasks = _this.tasks.length;
            }).catch(function (error) {
                _this.eventManager.publish("tasksResult", [false, error.message]);
            });
        }
        else {
            this.eventManager.publish("authenticationStateChange", [false, "You are not authenticated, please log in."]);
        }
    }
    Tasks.prototype.saveTask = function (event) {
        var _this = this;
        event.preventDefault();
        if (this.task && (this.task._id == null || this.task._id == undefined)) {
            var newTask = this.task;
            this.taskService.addTask(newTask).then(function (obj) {
                console.dir(obj);
                newTask.setId(obj.actionResult._id);
                console.log("before push: " + _this.tasks.length);
                _this.nrOfTasks = _this.tasks.push(newTask);
                _this.eventManager.publish("tasksResult", [true, "Added task '" + newTask.getId() + "'"]);
                _this.task = new task_1.Task();
            }).catch(function (error) {
                _this.eventManager.publish("tasksResult", [false, error.message]);
            });
        }
        else {
            this.taskService.updateTask(this.task).then(function (obj) {
                _this.eventManager.publish("tasksResult", [true, "Updated task '" + _this.task._id + "'"]);
                _this.task = new task_1.Task();
            }).catch(function (error) {
                _this.eventManager.publish("tasksResult", [false, error.message]);
            });
        }
    };
    Tasks.prototype.loadTask = function (event, task) {
        event.preventDefault();
        console.log("load task " + task._id);
        this.task = task;
    };
    Tasks.prototype.clearTask = function (event) {
        event.preventDefault();
        this.task = new task_1.Task();
    };
    Tasks.prototype.deleteTask = function (event) {
        var _this = this;
        event.preventDefault();
        console.log("tasks.ts delete " + this.task._id);
        this.taskService.deleteTask(this.task).then(function (obj) {
            _this.eventManager.publish("tasksResult", [true, "Deleted task '" + _this.task._id + "'"]);
            for (var i = 0, len = _this.tasks.length; i < len; i++) {
                var _task = _this.tasks[i];
                if (_task._id == _this.task._id) {
                    console.log("delete task with id " + _this.task._id + ", " + i);
                    _this.tasks.splice(i);
                }
            }
            _this.task = new task_1.Task();
        }).catch(function (error) {
            _this.eventManager.publish("tasksResult", [false, error.message]);
        });
    };
    Tasks = __decorate([
        angular2_1.Component({
            selector: 'component-2',
            viewInjector: [AuthenticationService_1.AuthenticationService, TaskService_1.TaskServiceImpl]
        }),
        angular2_1.View({
            templateUrl: './components/tasks/tasks.html?v=0.7.0',
            directives: [angular2_1.NgFor, angular2_1.NgIf, forms_1.formDirectives]
        }), 
        __metadata('design:paramtypes', [AuthenticationService_1.AuthenticationService, TaskService_1.TaskServiceImpl])
    ], Tasks);
    return Tasks;
})();
exports.Tasks = Tasks;

//# sourceMappingURL=data:application/json;base64,